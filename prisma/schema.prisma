// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique // External auth ID from Clerk
  email         String    @unique
  name          String?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  clubs         ClubMember[]
  teams         TeamMember[]
  votes         Vote[]
  comments      Comment[]
}

model Club {
  id            String    @id @default(cuid())
  name          String
  description   String?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Financial tracking
  brokerageConnections BrokerageConnection[]
  totalFunds    Decimal   @default(0)
  
  // Relationships
  members       ClubMember[]
  teams         Team[]
  proposals     Proposal[]
  transactions  Transaction[]
}

model Team {
  id            String    @id @default(cuid())
  clubId        String
  name          String
  description   String?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Financial tracking
  allocation    Decimal   @default(0) // Percentage of club funds
  performance   Performance[]

  // Relationships
  club          Club      @relation(fields: [clubId], references: [id])
  members       TeamMember[]
  transactions  Transaction[]
}

model ClubMember {
  id            String    @id @default(cuid())
  userId        String
  clubId        String
  role          ClubRole  @default(MEMBER)
  joinedAt      DateTime  @default(now())
  
  // Relationships
  user          User      @relation(fields: [userId], references: [id])
  club          Club      @relation(fields: [clubId], references: [id])

  @@unique([userId, clubId])
}

model TeamMember {
  id            String    @id @default(cuid())
  userId        String
  teamId        String
  role          TeamRole  @default(MEMBER)
  joinedAt      DateTime  @default(now())
  
  // Relationships
  user          User      @relation(fields: [userId], references: [id])
  team          Team      @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
}

model BrokerageConnection {
  id            String    @id @default(cuid())
  clubId        String
  provider      String    // e.g., "schwab"
  accountId     String
  accessToken   String
  refreshToken  String?
  expiresAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  club          Club      @relation(fields: [clubId], references: [id])

  @@unique([clubId, provider])
}

model Transaction {
  id            String    @id @default(cuid())
  clubId        String
  teamId        String?
  type          TransactionType
  symbol        String?
  shares        Decimal?
  amount        Decimal
  status        TransactionStatus @default(PENDING)
  executedAt    DateTime?
  createdAt     DateTime  @default(now())
  
  // Relationships
  club          Club      @relation(fields: [clubId], references: [id])
  team          Team?     @relation(fields: [teamId], references: [id])
}

model Proposal {
  id            String    @id @default(cuid())
  clubId        String
  title         String
  description   String
  status        ProposalStatus @default(ACTIVE)
  startDate     DateTime  @default(now())
  endDate       DateTime
  createdAt     DateTime  @default(now())
  
  // Relationships
  club          Club      @relation(fields: [clubId], references: [id])
  votes         Vote[]
  comments      Comment[]
}

model Vote {
  id            String    @id @default(cuid())
  userId        String
  proposalId    String
  vote          VoteType
  createdAt     DateTime  @default(now())
  
  // Relationships
  user          User      @relation(fields: [userId], references: [id])
  proposal      Proposal  @relation(fields: [proposalId], references: [id])

  @@unique([userId, proposalId])
}

model Comment {
  id            String    @id @default(cuid())
  userId        String
  proposalId    String
  content       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  user          User      @relation(fields: [userId], references: [id])
  proposal      Proposal  @relation(fields: [proposalId], references: [id])
}

model Performance {
  id            String    @id @default(cuid())
  teamId        String
  date          DateTime
  value         Decimal
  change        Decimal
  createdAt     DateTime  @default(now())
  
  // Relationships
  team          Team      @relation(fields: [teamId], references: [id])
}

enum ClubRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum TeamRole {
  LEADER
  MEMBER
}

enum TransactionType {
  BUY
  SELL
  DEPOSIT
  WITHDRAWAL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum ProposalStatus {
  ACTIVE
  PASSED
  REJECTED
  CANCELLED
}

enum VoteType {
  FOR
  AGAINST
  ABSTAIN
}